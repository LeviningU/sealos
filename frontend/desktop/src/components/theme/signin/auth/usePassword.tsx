import { passwordExistRequest, passwordLoginRequest } from '@/api/auth';
import request from '@/services/request';
import useSessionStore from '@/stores/session';
import { ApiResp, Session } from '@/types';
import { Flex, Icon, Input, InputGroup, InputLeftElement, Text } from '@chakra-ui/react';
import { useTranslation } from 'next-i18next';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { useForm } from 'react-hook-form';

export default function usePassword({
  showError
}: {
  showError: (errorMessage: string, duration?: number) => void;
}) {
  const { t } = useTranslation();
  const router = useRouter();
  const [userExist, setUserExist] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  // 对于注册的用户，需要先验证密码 0 默认页面;1为验证密码页面
  const [pageState, setPageState] = useState(0);

  const setSession = useSessionStore((s) => s.setSession);

  const { register, handleSubmit, watch, trigger, getValues } = useForm<{
    username: string;
    password: string;
    confimPassword: string;
  }>();

  const login = async () => {
    const deepSearch = (obj: any): string => {
      if (!obj || typeof obj !== 'object') return t('Submit Error');
      if (!!obj.message) {
        return obj.message;
      }
      return deepSearch(Object.values(obj)[0]);
    };

    handleSubmit(
      async (data) => {
        if (data?.username && data?.password) {
          try {
            setIsLoading(true);
            const result = await passwordExistRequest({ user: data.username });
            if (result?.code === 200) {
              const result = await passwordLoginRequest({
                user: data.username,
                password: data.password
              });
              setSession(result.data!);
              router.replace('/');
              return;
            }
            if (result?.code === 201) {
              setUserExist(!!result?.data?.exist);
              setPageState(1);
              if (!!data?.confimPassword) {
                if (data?.password !== data?.confimPassword) {
                  showError('password not match');
                } else {
                  const result = await request.post<any, ApiResp<Session>>('/api/auth/password', {
                    user: data.username,
                    password: data.password
                  });
                  setSession(result.data!);
                  router.replace('/');
                }
              }
            }
          } catch (error: any) {
            console.log(error);
            showError(t('Invalid username or password'));
          } finally {
            setIsLoading(false);
          }
        }
      },
      (err) => {
        console.log(err);
        showError(deepSearch(err));
      }
    )();
  };

  const PasswordComponent = () => {
    if (pageState === 0) {
      return <PasswordModal />;
    } else {
      return <ConfirmPasswordModal />;
    }
  };

  const PasswordModal = () => {
    return (
      <>
        <InputGroup mt="24px">
          <InputLeftElement>
            <Icon
              xmlns="http://www.w3.org/2000/svg"
              width="20px"
              height="20px"
              viewBox="0 0 20 20"
              fill="none"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.0001 3.33335C8.38929 3.33335 7.08345 4.63919 7.08345 6.25002C7.08345 7.86085 8.38929 9.16669 10.0001 9.16669C11.611 9.16669 12.9168 7.86085 12.9168 6.25002C12.9168 4.63919 11.611 3.33335 10.0001 3.33335ZM5.41679 6.25002C5.41679 3.71872 7.46882 1.66669 10.0001 1.66669C12.5314 1.66669 14.5835 3.71872 14.5835 6.25002C14.5835 8.78133 12.5314 10.8334 10.0001 10.8334C7.46882 10.8334 5.41679 8.78133 5.41679 6.25002ZM10.0001 13.3334C7.63426 13.3334 5.52553 14.4744 4.17832 16.2574C4.09591 16.3664 4.03284 16.45 3.98037 16.5235C3.94054 16.5792 3.91336 16.6202 3.89443 16.6512C4.01828 16.6653 4.19476 16.6667 4.52281 16.6667H15.4774C15.8055 16.6667 15.982 16.6653 16.1058 16.6512C16.0869 16.6202 16.0597 16.5792 16.0199 16.5235C15.9674 16.45 15.9043 16.3664 15.8219 16.2574C14.4747 14.4744 12.366 13.3334 10.0001 13.3334ZM2.84857 15.2526C4.49271 13.0767 7.08252 11.6667 10.0001 11.6667C12.9177 11.6667 15.5075 13.0767 17.1517 15.2526C17.1591 15.2624 17.1666 15.2723 17.1741 15.2822C17.3154 15.4692 17.467 15.6696 17.5753 15.863C17.7064 16.0971 17.8036 16.3678 17.7976 16.6972C17.7927 16.9619 17.7125 17.2097 17.6151 17.4053C17.5177 17.601 17.3684 17.8144 17.1601 17.9778C16.8823 18.1958 16.5799 18.273 16.3113 18.3052C16.0756 18.3335 15.7962 18.3334 15.5154 18.3334C15.5027 18.3334 15.4901 18.3334 15.4774 18.3334H4.52281C4.51015 18.3334 4.4975 18.3334 4.48484 18.3334C4.20401 18.3334 3.92469 18.3335 3.68899 18.3052C3.42033 18.273 3.11791 18.1958 2.84014 17.9778C2.63185 17.8144 2.4825 17.601 2.3851 17.4053C2.2877 17.2097 2.2075 16.9619 2.20266 16.6972C2.19664 16.3678 2.29381 16.0971 2.42492 15.863C2.53324 15.6696 2.68482 15.4692 2.82618 15.2822C2.83367 15.2723 2.84114 15.2624 2.84857 15.2526Z"
                fill="#485264"
              />
            </Icon>
          </InputLeftElement>
          <Input
            type="text"
            bg="#F7F8FA"
            fontSize="14px"
            fontWeight="400"
            borderRadius={'8px'}
            border={'1px solid #E8EBF0'}
            placeholder={t('Username') || ''}
            _hover={{
              borderColor: '#85CCFF'
            }}
            _focusVisible={{
              bg: 'rgba(255, 255, 255, 0.65)',
              borderColor: '#219BF4',
              boxShadow: '0px 0px 0px 2.4px rgba(33, 155, 244, 0.15)'
            }}
            _autofill={{
              backgroundColor: 'transparent !important',
              backgroundImage: 'none !important'
            }}
            {...register('username', {
              pattern: {
                value: /^[a-zA-Z0-9_-]{3,16}$/,
                message: 'username tips'
              },
              required: true
            })}
          />
        </InputGroup>

        <InputGroup mt="16px">
          <InputLeftElement>
            <Icon
              xmlns="http://www.w3.org/2000/svg"
              width="20px"
              height="20px"
              viewBox="0 0 20 20"
              fill="none"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M6.46567 1.66675L13.5345 1.66675C14.2053 1.66674 14.7589 1.66673 15.2099 1.70358C15.6784 1.74185 16.1089 1.82399 16.5134 2.03006C17.1406 2.34964 17.6505 2.85957 17.9701 3.48678C18.1762 3.89123 18.2583 4.32181 18.2966 4.79023C18.3334 5.24122 18.3334 5.79485 18.3334 6.46565V13.5345C18.3334 14.2053 18.3334 14.7589 18.2966 15.2099C18.2583 15.6784 18.1762 16.1089 17.9701 16.5134C17.6505 17.1406 17.1406 17.6505 16.5134 17.9701C16.1089 18.1762 15.6784 18.2583 15.2099 18.2966C14.7589 18.3334 14.2053 18.3334 13.5345 18.3334H6.46573C5.79489 18.3334 5.24124 18.3334 4.79023 18.2966C4.32181 18.2583 3.89123 18.1762 3.48678 17.9701C2.85957 17.6505 2.34964 17.1406 2.03006 16.5134C1.82398 16.1089 1.74185 15.6783 1.70358 15.2099C1.66673 14.7589 1.66674 14.2053 1.66675 13.5345L1.66675 6.46567C1.66674 5.79486 1.66673 5.24122 1.70358 4.79023C1.74185 4.32181 1.82398 3.89123 2.03006 3.48678C2.34964 2.85957 2.85957 2.34964 3.48678 2.03006C3.89123 1.82398 4.32181 1.74185 4.79023 1.70358C5.24122 1.66673 5.79486 1.66674 6.46567 1.66675ZM4.92595 3.36471C4.5606 3.39456 4.37376 3.44866 4.24343 3.51507C3.92983 3.67486 3.67486 3.92983 3.51507 4.24343C3.44866 4.37376 3.39456 4.5606 3.36471 4.92595C3.33406 5.30102 3.33342 5.78627 3.33342 6.50008V13.5001C3.33342 14.2139 3.33406 14.6991 3.36471 15.0742C3.39456 15.4396 3.44866 15.6264 3.51507 15.7567C3.67486 16.0703 3.92983 16.3253 4.24343 16.4851C4.37376 16.5515 4.5606 16.6056 4.92595 16.6355C5.30102 16.6661 5.78627 16.6667 6.50008 16.6667H13.5001C14.2139 16.6667 14.6991 16.6661 15.0742 16.6355C15.4396 16.6056 15.6264 16.5515 15.7567 16.4851C16.0703 16.3253 16.3253 16.0703 16.4851 15.7567C16.5515 15.6264 16.6056 15.4396 16.6355 15.0742C16.6661 14.6991 16.6667 14.2139 16.6667 13.5001V6.50008C16.6667 5.78627 16.6661 5.30102 16.6355 4.92595C16.6056 4.5606 16.5515 4.37377 16.4851 4.24343C16.3253 3.92983 16.0703 3.67486 15.7567 3.51507C15.6264 3.44866 15.4396 3.39456 15.0742 3.36471C14.6991 3.33406 14.2139 3.33342 13.5001 3.33342L6.50008 3.33342C5.78627 3.33342 5.30102 3.33406 4.92595 3.36471ZM6.66675 8.33342C6.66675 6.49247 8.15913 5.00008 10.0001 5.00008C11.841 5.00008 13.3334 6.49247 13.3334 8.33342C13.3334 9.29724 12.9233 10.1666 12.2704 10.7741C12.2645 10.7796 12.2587 10.785 12.253 10.7903L12.9982 13.0257C13.0007 13.0333 13.0032 13.041 13.0058 13.0486C13.0484 13.1763 13.0961 13.3194 13.126 13.4456C13.1586 13.5836 13.1972 13.8044 13.1344 14.0545C13.0566 14.3641 12.8633 14.6323 12.5942 14.804C12.3768 14.9426 12.1551 14.9759 12.0139 14.9886C11.8847 15.0002 11.7338 15.0001 11.5993 15.0001C11.5912 15.0001 11.5831 15.0001 11.5751 15.0001H8.42503C8.41706 15.0001 8.40901 15.0001 8.40091 15.0001C8.26633 15.0001 8.11547 15.0002 7.98628 14.9886C7.8451 14.9759 7.6234 14.9426 7.40599 14.804C7.13683 14.6323 6.94356 14.3641 6.86581 14.0545C6.80301 13.8044 6.84159 13.5836 6.87419 13.4456C6.90402 13.3194 6.95177 13.1763 6.99437 13.0486C6.99694 13.0409 6.99948 13.0333 7.00201 13.0257L7.74716 10.7903C7.74151 10.785 7.7357 10.7796 7.72974 10.7741C7.0769 10.1666 6.66675 9.29724 6.66675 8.33342ZM10.0001 6.66675C9.07961 6.66675 8.33342 7.41294 8.33342 8.33342C8.33342 8.81537 8.53691 9.24852 8.86511 9.55393L8.87602 9.56408C8.95533 9.63787 9.03364 9.71072 9.09527 9.77334C9.14966 9.82858 9.25826 9.9408 9.33684 10.0923C9.36967 10.1556 9.41153 10.2452 9.44039 10.3583C9.46924 10.4714 9.4754 10.57 9.47691 10.6413C9.48018 10.7956 9.44936 10.9257 9.42694 11.0078C9.40621 11.0837 9.37758 11.1695 9.35223 11.2455L8.65627 13.3334H11.3439L10.6479 11.2455C10.6226 11.1695 10.5939 11.0837 10.5732 11.0078C10.5508 10.9257 10.52 10.7956 10.5233 10.6413C10.5248 10.57 10.5309 10.4714 10.5598 10.3583C10.5886 10.2452 10.6305 10.1556 10.6633 10.0923C10.7419 9.9408 10.8505 9.82859 10.9049 9.77334C10.9665 9.71071 11.0449 9.63783 11.1242 9.56403L11.1351 9.55393C11.4633 9.24852 11.6667 8.81537 11.6667 8.33342C11.6667 7.41294 10.9206 6.66675 10.0001 6.66675Z"
                fill="#485264"
              />
            </Icon>
          </InputLeftElement>
          <Input
            type="password"
            bg="#F7F8FA"
            fontSize="14px"
            fontWeight="400"
            borderRadius={'8px'}
            placeholder={t('Password') || ''}
            _hover={{
              borderColor: '#85CCFF'
            }}
            _focusVisible={{
              bg: 'rgba(255, 255, 255, 0.65)',
              borderColor: '#219BF4',
              boxShadow: '0px 0px 0px 2.4px rgba(33, 155, 244, 0.15)'
            }}
            _autofill={{
              backgroundColor: 'transparent !important',
              backgroundImage: 'none !important'
            }}
            {...register('password', {
              pattern: {
                value: /^(?=.*\S).{8,}$/,
                message: 'password tips'
              },
              required: true
            })}
          />
        </InputGroup>
      </>
    );
  };

  const ConfirmPasswordModal = () => {
    return (
      <>
        <Flex alignItems={'center'}>
          <Icon
            xmlns="http://www.w3.org/2000/svg"
            width="24px"
            height="24px"
            viewBox="0 0 24 24"
            fill="none"
            onClick={() => setPageState(0)}
            cursor={'pointer'}
          >
            <g clipPath="url(#clip0_76_314)">
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M7.70711 5.29289C8.09763 5.68342 8.09763 6.31658 7.70711 6.70711L2.41421 12L7.70711 17.2929C8.09763 17.6834 8.09763 18.3166 7.70711 18.7071C7.31658 19.0976 6.68342 19.0976 6.29289 18.7071L0.292893 12.7071C-0.0976315 12.3166 -0.0976315 11.6834 0.292893 11.2929L6.29289 5.29289C6.68342 4.90237 7.31658 4.90237 7.70711 5.29289Z"
                fill="black"
              />
            </g>
          </Icon>
          <Text color={'#111824'} fontSize={'20px'} fontWeight={500}>
            {t('Verify password')}
          </Text>
        </Flex>

        <InputGroup mt="60px">
          <InputLeftElement>
            <Icon
              xmlns="http://www.w3.org/2000/svg"
              width="20px"
              height="20px"
              viewBox="0 0 20 20"
              fill="none"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M6.46567 1.66675L13.5345 1.66675C14.2053 1.66674 14.7589 1.66673 15.2099 1.70358C15.6784 1.74185 16.1089 1.82399 16.5134 2.03006C17.1406 2.34964 17.6505 2.85957 17.9701 3.48678C18.1762 3.89123 18.2583 4.32181 18.2966 4.79023C18.3334 5.24122 18.3334 5.79485 18.3334 6.46565V13.5345C18.3334 14.2053 18.3334 14.7589 18.2966 15.2099C18.2583 15.6784 18.1762 16.1089 17.9701 16.5134C17.6505 17.1406 17.1406 17.6505 16.5134 17.9701C16.1089 18.1762 15.6784 18.2583 15.2099 18.2966C14.7589 18.3334 14.2053 18.3334 13.5345 18.3334H6.46573C5.79489 18.3334 5.24124 18.3334 4.79023 18.2966C4.32181 18.2583 3.89123 18.1762 3.48678 17.9701C2.85957 17.6505 2.34964 17.1406 2.03006 16.5134C1.82398 16.1089 1.74185 15.6783 1.70358 15.2099C1.66673 14.7589 1.66674 14.2053 1.66675 13.5345L1.66675 6.46567C1.66674 5.79486 1.66673 5.24122 1.70358 4.79023C1.74185 4.32181 1.82398 3.89123 2.03006 3.48678C2.34964 2.85957 2.85957 2.34964 3.48678 2.03006C3.89123 1.82398 4.32181 1.74185 4.79023 1.70358C5.24122 1.66673 5.79486 1.66674 6.46567 1.66675ZM4.92595 3.36471C4.5606 3.39456 4.37376 3.44866 4.24343 3.51507C3.92983 3.67486 3.67486 3.92983 3.51507 4.24343C3.44866 4.37376 3.39456 4.5606 3.36471 4.92595C3.33406 5.30102 3.33342 5.78627 3.33342 6.50008V13.5001C3.33342 14.2139 3.33406 14.6991 3.36471 15.0742C3.39456 15.4396 3.44866 15.6264 3.51507 15.7567C3.67486 16.0703 3.92983 16.3253 4.24343 16.4851C4.37376 16.5515 4.5606 16.6056 4.92595 16.6355C5.30102 16.6661 5.78627 16.6667 6.50008 16.6667H13.5001C14.2139 16.6667 14.6991 16.6661 15.0742 16.6355C15.4396 16.6056 15.6264 16.5515 15.7567 16.4851C16.0703 16.3253 16.3253 16.0703 16.4851 15.7567C16.5515 15.6264 16.6056 15.4396 16.6355 15.0742C16.6661 14.6991 16.6667 14.2139 16.6667 13.5001V6.50008C16.6667 5.78627 16.6661 5.30102 16.6355 4.92595C16.6056 4.5606 16.5515 4.37377 16.4851 4.24343C16.3253 3.92983 16.0703 3.67486 15.7567 3.51507C15.6264 3.44866 15.4396 3.39456 15.0742 3.36471C14.6991 3.33406 14.2139 3.33342 13.5001 3.33342L6.50008 3.33342C5.78627 3.33342 5.30102 3.33406 4.92595 3.36471ZM6.66675 8.33342C6.66675 6.49247 8.15913 5.00008 10.0001 5.00008C11.841 5.00008 13.3334 6.49247 13.3334 8.33342C13.3334 9.29724 12.9233 10.1666 12.2704 10.7741C12.2645 10.7796 12.2587 10.785 12.253 10.7903L12.9982 13.0257C13.0007 13.0333 13.0032 13.041 13.0058 13.0486C13.0484 13.1763 13.0961 13.3194 13.126 13.4456C13.1586 13.5836 13.1972 13.8044 13.1344 14.0545C13.0566 14.3641 12.8633 14.6323 12.5942 14.804C12.3768 14.9426 12.1551 14.9759 12.0139 14.9886C11.8847 15.0002 11.7338 15.0001 11.5993 15.0001C11.5912 15.0001 11.5831 15.0001 11.5751 15.0001H8.42503C8.41706 15.0001 8.40901 15.0001 8.40091 15.0001C8.26633 15.0001 8.11547 15.0002 7.98628 14.9886C7.8451 14.9759 7.6234 14.9426 7.40599 14.804C7.13683 14.6323 6.94356 14.3641 6.86581 14.0545C6.80301 13.8044 6.84159 13.5836 6.87419 13.4456C6.90402 13.3194 6.95177 13.1763 6.99437 13.0486C6.99694 13.0409 6.99948 13.0333 7.00201 13.0257L7.74716 10.7903C7.74151 10.785 7.7357 10.7796 7.72974 10.7741C7.0769 10.1666 6.66675 9.29724 6.66675 8.33342ZM10.0001 6.66675C9.07961 6.66675 8.33342 7.41294 8.33342 8.33342C8.33342 8.81537 8.53691 9.24852 8.86511 9.55393L8.87602 9.56408C8.95533 9.63787 9.03364 9.71072 9.09527 9.77334C9.14966 9.82858 9.25826 9.9408 9.33684 10.0923C9.36967 10.1556 9.41153 10.2452 9.44039 10.3583C9.46924 10.4714 9.4754 10.57 9.47691 10.6413C9.48018 10.7956 9.44936 10.9257 9.42694 11.0078C9.40621 11.0837 9.37758 11.1695 9.35223 11.2455L8.65627 13.3334H11.3439L10.6479 11.2455C10.6226 11.1695 10.5939 11.0837 10.5732 11.0078C10.5508 10.9257 10.52 10.7956 10.5233 10.6413C10.5248 10.57 10.5309 10.4714 10.5598 10.3583C10.5886 10.2452 10.6305 10.1556 10.6633 10.0923C10.7419 9.9408 10.8505 9.82859 10.9049 9.77334C10.9665 9.71071 11.0449 9.63783 11.1242 9.56403L11.1351 9.55393C11.4633 9.24852 11.6667 8.81537 11.6667 8.33342C11.6667 7.41294 10.9206 6.66675 10.0001 6.66675Z"
                fill="#485264"
              />
            </Icon>
          </InputLeftElement>
          <Input
            borderRadius={'8px'}
            bg="#F7F8FA"
            type="password"
            placeholder={t('Verify password') || 'Verify password'}
            fontSize="14px"
            id="repassword"
            fontWeight="400"
            _hover={{
              borderColor: '#85CCFF'
            }}
            _focusVisible={{
              bg: 'rgba(255, 255, 255, 0.65)',
              borderColor: '#219BF4',
              boxShadow: '0px 0px 0px 2.4px rgba(33, 155, 244, 0.15)'
            }}
            _autofill={{
              backgroundColor: 'transparent !important',
              backgroundImage: 'none !important'
            }}
            {...register('confimPassword', {
              pattern: {
                value: /^(?=.*\S).{8,}$/,
                message: 'password tips'
              },
              required: true
            })}
          />
        </InputGroup>
      </>
    );
  };

  return {
    PasswordComponent,
    login,
    userExist,
    pageState,
    isLoading
  };
}
